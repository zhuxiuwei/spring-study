<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="cat" class="pojo.Cat"/>
    <bean id="dog" class="pojo.Dog"/>


    <!-- 自动装配 byName: 根据属性的set方法(如setFoo)，自动去容器上下文里查找bean id相同的bean(如id=foo)。
         本例中，Person类里有setDog、setCat方法，故会在容器上下文里找bean id为dog和cat的类来注入给Person的两个属性。
         弊端：beanId要对应装配类里setXXX属性的名称，其第一个字母要小写。所以bean id=foo写成Foo、fOo、foo1都不行。 -->
    <bean id="personByName" class="pojo.Person" autowire="byName"/>

    <!-- 自动装配 byType: 根据属性的类型，自动去容器上下文里查找类型相同的bean。
         弊端： 要求一个类型全局唯一。 如果有两个bean class相同，则直接xml就报错。比如如果定义了俩class="pojo.Dog"的bean,
         会报错：Could not autowire. There is more than one bean of 'Dog' type. Beans: dog,do2g. Properties: 'dog' 、
         好处： bean的id省略了，依然可以跑成功。 -->
    <bean id="personByType" class="pojo.Person" autowire="byType"/>

    <!-- 以下手工
    <bean id="person" class="pojo.Person">
        <property name="name" value="Tom"/>
        <property name="dog" ref="dog"/>
        <property name="cat" ref="cat"/>
    </bean>
    -->
</beans>